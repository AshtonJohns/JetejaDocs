{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JetejaDocs This is the official documentation site for the Jeteja Project. Here, you\u2019ll find everything you need to install, configure, and start using Jeteja. We provide detailed guides for setup, parts, and usage, along with active development updates and demos to help you get the most out of the project. Quick Links Installation Instructions \u2013 Step-by-step setup guide. Parts List \u2013 Complete list of components and specifications. Getting It Running \u2013 Initial run and configuration details. Demos \u2013 Explore the project in action. Active Development \u2013 What\u2019s currently in progress.","title":"Home"},{"location":"#welcome-to-jetejadocs","text":"This is the official documentation site for the Jeteja Project. Here, you\u2019ll find everything you need to install, configure, and start using Jeteja. We provide detailed guides for setup, parts, and usage, along with active development updates and demos to help you get the most out of the project.","title":"Welcome to JetejaDocs"},{"location":"#quick-links","text":"Installation Instructions \u2013 Step-by-step setup guide. Parts List \u2013 Complete list of components and specifications. Getting It Running \u2013 Initial run and configuration details. Demos \u2013 Explore the project in action. Active Development \u2013 What\u2019s currently in progress.","title":"Quick Links"},{"location":"active_development/","text":"","title":"Active Development"},{"location":"circuit_flow_diagrams/","text":"Circuit Flow Diagram Revision History Here are circuit flow diagrams for Jeteja robot. Rev 1 Rev 2 Rev 3 Rev 4","title":"Circuit Flow Diagram Revision History"},{"location":"circuit_flow_diagrams/#circuit-flow-diagram-revision-history","text":"Here are circuit flow diagrams for Jeteja robot. Rev 1 Rev 2 Rev 3 Rev 4","title":"Circuit Flow Diagram Revision History"},{"location":"demos/","text":"","title":"Demos"},{"location":"description/","text":"","title":"Description"},{"location":"getting_it_running/","text":"","title":"Getting it Running"},{"location":"installation/","text":"Installation Guide This guide will help you set up the project on your system. My Setup Powerful computer 5950X CPU RTX 3080 GPU Ubuntu 22.04 NVidia Jetson Jetson Orin Nano Developer Kit with JetPack 6.1 Ubuntu 22.04 Powerful Computer for Machine Learning ROS 2 Humble https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html And make sure that you have the common extensions by: sudo apt install python3-colcon-common-extensions librealsense2 Follow the documentation at: https://github.com/IntelRealSense/librealsense/blob/master/doc/installation.md realsense2_camera ROS 2 package sudo apt install ros-humble-realsense2-camera rplidar ROS 2 package sudo apt install ros-humble-rplidar teleop_twist_joy package sudo apt install ros-humble-teleop_twist_joy requirements.txt These are selective things to install that are required, but you might already have. You may pick any of the items and run a pip install <module> Install CUDA Toolkit Install using the official documentation: https://developer.nvidia.com/cuda-downloads These were my options: * Operating System: Linux Architecture: x86_64 Distribution: Ubuntu 20.04 Version: Latest (e.g., CUDA 12.0) Add CUDA paths echo 'export PATH=/usr/local/cuda/bin:$PATH' >> ~/.bashrc echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc source ~/.bashrc Verify installation nvcc --version Install cuDNN https://developer.nvidia.com/cudnn Verify your options. Installing Tensorflow The highest JetPack 6.1 will allow is tensorflow 2.18. It's recommended to keep the same version on both computers. The requirements.txt file found within the root of the workspace includes tensorflow and other needed installs. Install python virtual environment sudo apt install -y python3-venv Create the virtual environment mkdir ~/tf_env cd ~/tf_env python3 -m venv tf-gpu Sourcing Tensorflow with virtual environment If you have a virtual environment creates, then either add source ~/tf_env/tf-gpu/bin/activate to your ~/.bashrc file or source it when spawning a new terminal. Verify TensorFlow and GPU support python -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\" NVidia Jetson FLASHING JETPACK TODO ROS2 and librealsense2 Setup This should follow the same procedure for the powerful computer above. Building the Workspace This should follow the same procedure for the powerful computer above. Installing Tensorflow https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html Tensorflow 2.18 This is the most up to date version for Jetpack 6.1. sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v61 tensorflow==2.16.1+nv24.08 You might need to downgrade your numpy. Test Tensorflow To test, run the following for GPU support: python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices())\" Sourcing the workspace To automatically source your workspace setup each time you open a terminal, add the following lines to your ~/.bashrc file: source ~/jeteja_ws/install/setup.bash and if you did not when installing ros2 humble, source it by source /opt/ros/humble/install/setup.bash","title":"Installation Instructions"},{"location":"installation/#installation-guide","text":"This guide will help you set up the project on your system.","title":"Installation Guide"},{"location":"installation/#my-setup","text":"","title":"My Setup"},{"location":"installation/#powerful-computer","text":"5950X CPU RTX 3080 GPU Ubuntu 22.04","title":"Powerful computer"},{"location":"installation/#nvidia-jetson","text":"Jetson Orin Nano Developer Kit with JetPack 6.1 Ubuntu 22.04","title":"NVidia Jetson"},{"location":"installation/#powerful-computer-for-machine-learning","text":"","title":"Powerful Computer for Machine Learning"},{"location":"installation/#ros-2-humble","text":"https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html And make sure that you have the common extensions by: sudo apt install python3-colcon-common-extensions","title":"ROS 2 Humble"},{"location":"installation/#librealsense2","text":"Follow the documentation at: https://github.com/IntelRealSense/librealsense/blob/master/doc/installation.md","title":"librealsense2"},{"location":"installation/#realsense2_camera-ros-2-package","text":"sudo apt install ros-humble-realsense2-camera","title":"realsense2_camera ROS 2 package"},{"location":"installation/#rplidar-ros-2-package","text":"sudo apt install ros-humble-rplidar","title":"rplidar ROS 2 package"},{"location":"installation/#teleop_twist_joy-package","text":"sudo apt install ros-humble-teleop_twist_joy","title":"teleop_twist_joy package"},{"location":"installation/#requirementstxt","text":"These are selective things to install that are required, but you might already have. You may pick any of the items and run a pip install <module>","title":"requirements.txt"},{"location":"installation/#install-cuda-toolkit","text":"Install using the official documentation: https://developer.nvidia.com/cuda-downloads These were my options: * Operating System: Linux Architecture: x86_64 Distribution: Ubuntu 20.04 Version: Latest (e.g., CUDA 12.0)","title":"Install CUDA Toolkit"},{"location":"installation/#add-cuda-paths","text":"echo 'export PATH=/usr/local/cuda/bin:$PATH' >> ~/.bashrc echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc source ~/.bashrc","title":"Add CUDA paths"},{"location":"installation/#verify-installation","text":"nvcc --version","title":"Verify installation"},{"location":"installation/#install-cudnn","text":"https://developer.nvidia.com/cudnn Verify your options.","title":"Install cuDNN"},{"location":"installation/#installing-tensorflow","text":"The highest JetPack 6.1 will allow is tensorflow 2.18. It's recommended to keep the same version on both computers. The requirements.txt file found within the root of the workspace includes tensorflow and other needed installs.","title":"Installing Tensorflow"},{"location":"installation/#install-python-virtual-environment","text":"sudo apt install -y python3-venv","title":"Install python virtual environment"},{"location":"installation/#create-the-virtual-environment","text":"mkdir ~/tf_env cd ~/tf_env python3 -m venv tf-gpu","title":"Create the virtual environment"},{"location":"installation/#sourcing-tensorflow-with-virtual-environment","text":"If you have a virtual environment creates, then either add source ~/tf_env/tf-gpu/bin/activate to your ~/.bashrc file or source it when spawning a new terminal.","title":"Sourcing Tensorflow with virtual environment"},{"location":"installation/#verify-tensorflow-and-gpu-support","text":"python -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"","title":"Verify TensorFlow and GPU support"},{"location":"installation/#nvidia-jetson_1","text":"","title":"NVidia Jetson"},{"location":"installation/#flashing-jetpack","text":"TODO","title":"FLASHING JETPACK"},{"location":"installation/#ros2-and-librealsense2-setup","text":"This should follow the same procedure for the powerful computer above.","title":"ROS2 and librealsense2 Setup"},{"location":"installation/#building-the-workspace","text":"This should follow the same procedure for the powerful computer above.","title":"Building the Workspace"},{"location":"installation/#installing-tensorflow_1","text":"https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html","title":"Installing Tensorflow"},{"location":"installation/#tensorflow-218","text":"This is the most up to date version for Jetpack 6.1. sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v61 tensorflow==2.16.1+nv24.08 You might need to downgrade your numpy.","title":"Tensorflow 2.18"},{"location":"installation/#test-tensorflow","text":"To test, run the following for GPU support: python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices())\"","title":"Test Tensorflow"},{"location":"installation/#sourcing-the-workspace","text":"To automatically source your workspace setup each time you open a terminal, add the following lines to your ~/.bashrc file: source ~/jeteja_ws/install/setup.bash and if you did not when installing ros2 humble, source it by source /opt/ros/humble/install/setup.bash","title":"Sourcing the workspace"},{"location":"mechanical_design/","text":"Mechanical Designs Revision History Here are the mechanical designs for Jeteja robot. View Fall 2024 Mechanical Drawings","title":"Mechanical Design Deliverables"},{"location":"mechanical_design/#mechanical-designs-revision-history","text":"Here are the mechanical designs for Jeteja robot. View Fall 2024 Mechanical Drawings","title":"Mechanical Designs Revision History"},{"location":"parts_list/","text":"","title":"Parts List"},{"location":"power_system_diagrams/","text":"Power System Diagram Revision History Here are power system diagrams for Jeteja robot. Rev 1 Rev 2 Rev 3 Rev 4","title":"Power System Diagram Revision History"},{"location":"power_system_diagrams/#power-system-diagram-revision-history","text":"Here are power system diagrams for Jeteja robot. Rev 1 Rev 2 Rev 3 Rev 4","title":"Power System Diagram Revision History"},{"location":"progress_log/","text":"Using tensorflow Workstation (Ubuntu 20.04, 5950X, rtx3080) Install CUDA Toolkit https://developer.nvidia.com/cuda-downloads These were my options: * Operating System: Linux * Architecture: x86_64 * Distribution: Ubuntu 20.04 * Version: Latest (e.g., CUDA 12.0) Add CUDA paths echo 'export PATH=/usr/local/cuda/bin:$PATH' >> ~/.bashrc echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc source ~/.bashrc Verify installation nvcc --version Install cuDNN https://developer.nvidia.com/cudnn Verify your options Training and optimizing Install requirements.txt cd ~/jeteja_robot pip install -r requirements.txt Install python virtual environment sudo apt install -y python3-venv Create the virtual environment python3 -m venv tf-gpu source tf-gpu/bin/activate Verify TensorFlow and GPU support python -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\" Jetson Orin Nano (Jetpack 6.1) Install tensorflow https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html or for jp 6.1, sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v61 tensorflow==2.16.1+nv24.08 You might need to downgrade your numpy. To test, run the following for GPU support: python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices())\" Possible issue fixes Set OpenMP Environment Variable export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 Enable TensorFlow\u2019s cuda_malloc_async Allocator export TF_GPU_ALLOCATOR=cuda_malloc_async Copying from jetson to powerful computer Rsync rsync -avz [source-username]@[source-IP]:/path/to/source/ /path/to/destination/","title":"Progress Log"},{"location":"progress_log/#using-tensorflow","text":"","title":"Using tensorflow"},{"location":"progress_log/#workstation-ubuntu-2004-5950x-rtx3080","text":"","title":"Workstation (Ubuntu 20.04, 5950X, rtx3080)"},{"location":"progress_log/#install-cuda-toolkit","text":"https://developer.nvidia.com/cuda-downloads These were my options: * Operating System: Linux * Architecture: x86_64 * Distribution: Ubuntu 20.04 * Version: Latest (e.g., CUDA 12.0)","title":"Install CUDA Toolkit"},{"location":"progress_log/#add-cuda-paths","text":"echo 'export PATH=/usr/local/cuda/bin:$PATH' >> ~/.bashrc echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc source ~/.bashrc","title":"Add CUDA paths"},{"location":"progress_log/#verify-installation","text":"nvcc --version","title":"Verify installation"},{"location":"progress_log/#install-cudnn","text":"https://developer.nvidia.com/cudnn Verify your options","title":"Install cuDNN"},{"location":"progress_log/#training-and-optimizing","text":"","title":"Training and optimizing"},{"location":"progress_log/#install-requirementstxt","text":"cd ~/jeteja_robot pip install -r requirements.txt","title":"Install requirements.txt"},{"location":"progress_log/#install-python-virtual-environment","text":"sudo apt install -y python3-venv","title":"Install python virtual environment"},{"location":"progress_log/#create-the-virtual-environment","text":"python3 -m venv tf-gpu source tf-gpu/bin/activate","title":"Create the virtual environment"},{"location":"progress_log/#verify-tensorflow-and-gpu-support","text":"python -c \"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\"","title":"Verify TensorFlow and GPU support"},{"location":"progress_log/#jetson-orin-nano-jetpack-61","text":"","title":"Jetson Orin Nano (Jetpack 6.1)"},{"location":"progress_log/#install-tensorflow","text":"https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html or for jp 6.1, sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v61 tensorflow==2.16.1+nv24.08 You might need to downgrade your numpy. To test, run the following for GPU support: python3 -c \"import tensorflow as tf; print(tf.config.list_physical_devices())\"","title":"Install tensorflow"},{"location":"progress_log/#possible-issue-fixes","text":"","title":"Possible issue fixes"},{"location":"progress_log/#set-openmp-environment-variable","text":"export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1","title":"Set OpenMP Environment Variable"},{"location":"progress_log/#enable-tensorflows-cuda_malloc_async-allocator","text":"export TF_GPU_ALLOCATOR=cuda_malloc_async","title":"Enable TensorFlow\u2019s cuda_malloc_async Allocator"},{"location":"progress_log/#copying-from-jetson-to-powerful-computer","text":"","title":"Copying from jetson to powerful computer"},{"location":"progress_log/#rsync","text":"rsync -avz [source-username]@[source-IP]:/path/to/source/ /path/to/destination/","title":"Rsync"},{"location":"requirements/","text":"","title":"Requirements"},{"location":"updating_site/","text":"Updating this github page be on master branch write changes / commit changes in root of github repository, execute mkdocs gh-deploy Updating .md files content goes here to display those pages and make style changes, be sure to include them on the mkdocs.yml file","title":"Updating this Site"},{"location":"updating_site/#updating-this-github-page","text":"be on master branch write changes / commit changes in root of github repository, execute mkdocs gh-deploy","title":"Updating this github page"},{"location":"updating_site/#updating-md-files","text":"content goes here to display those pages and make style changes, be sure to include them on the mkdocs.yml file","title":"Updating .md files"}]}